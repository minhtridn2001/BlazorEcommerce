@page "/Orders/{id:int}"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.FluentUI.AspNetCore.Components
@using System.Globalization
@using BlazorEcommerce.Shared.DTO

@inject HttpClient _http
@inject NavigationManager _navigation

@attribute [Authorize]
@rendermode InteractiveWebAssembly

<h2 class="text-2xl font-bold mb-4">Order Information</h2>

@if (order != null)
{
    <div class="row">
        <div class="col-lg-7 col-12">
            <div class="border rounded p-3 shadow-sm">
                <h4 class="text-center mb-3">Order Summary</h4>
                <hr>
                <div class="d-flex justify-content-between">
                    <h5 class="fw-bold">Order ID:</h5>
                    <h5>#@order.Id</h5>
                </div>
                <div class="d-flex justify-content-between">
                    <h5 class="fw-bold">Status:</h5>
                    <h5 class="@GetOrderStatusClass(order.OrderStatus)">@order.OrderStatus</h5>
                </div>
                <div class="d-flex justify-content-between">
                    <h5 class="fw-bold">Payment:</h5>
                    <h5 class="@GetPaymentStatusClass(order.PaymentStatus)">@order.PaymentStatus</h5>
                </div>
                <div class="d-flex justify-content-between">
                    <h5 class="fw-bold">Created:</h5>
                    <h5>@order.CreatedDate.ToString("MMM dd, yyyy")</h5>
                </div>
                <hr>
                <h4 class="text-center mb-3">Shipping Information</h4>
                <div>
                    <p><strong>Contact Name:</strong> @order.ContactName</p>
                    <p><strong>Phone:</strong> @order.Phone</p>
                    <p><strong>Address:</strong> @order.ShippingAddress</p>
                    <p><strong>Notes:</strong> @order.Notes</p>
                </div>
            </div>
        </div>

        <div class="col-lg-5 col-12">
            <div class="border rounded p-3 shadow-sm">
                <h4 class="text-center mb-3">Order Items</h4>
                <hr>
                @if (order?.Items != null && order.Items.Any())
                {
                    <div class="d-flex flex-wrap gap-2 overflow-auto" style="max-height: 300px;">
                        @foreach (var item in order.Items)
                        {
                            <div class="d-flex align-items-center border rounded p-2 shadow-sm w-100" style="min-width: 320px;">
                                <div class="ms-2 flex-grow-1">
                                    <h6 class="mb-0 text-truncate" style="max-width: 150px;">@item.ProductName</h6>
                                </div>
                                <h6 class="fw-bold ms-3">x @item.Quantity</h6>
                                <h6 class="text-danger fw-bold ms-3">@((item.Price * item.Quantity).ToString("C", CultureInfo.GetCultureInfo("vi-VN")))</h6>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <p>No items found in this order.</p>
                }
                <hr>
                <div class="d-flex justify-content-between">
                    <h5 class="fw-bold">Subtotal:</h5>
                    <h5 class="text-success fw-bold">@order?.SubTotal.ToString("C", CultureInfo.GetCultureInfo("vi-VN"))</h5>
                </div>
                <div class="d-flex justify-content-between">
                    <h5 class="fw-bold">Tax (10%):</h5>
                    <h5 class="text-success fw-bold">@order?.Tax.ToString("C", CultureInfo.GetCultureInfo("vi-VN"))</h5>
                </div>
                <div class="d-flex justify-content-between">
                    <h5 class="fw-bold">Grand Total:</h5>
                    <h5 class="text-success fw-bold">@order?.GrandTotal.ToString("C", CultureInfo.GetCultureInfo("vi-VN"))</h5>
                </div>
                <button class="btn btn-primary w-100 mt-3 py-2" @onclick="GoToHome">
                    <i class="bi bi-arrow-left"></i> Back to My Orders
                </button>
            </div>
        </div>
    </div>
}
else
{
    <p>Loading order details...</p>
}

@code {
    [Parameter] public int Id { get; set; }

    private OrderDTO? order;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            order = await _http.GetFromJsonAsync<OrderDTO>($"api/orders/{Id}");
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error fetching order: " + ex.Message);
        }
    }

    private string GetOrderStatusClass(string status)
    {
        return status switch
        {
            "Pending" => "bg-yellow-500 text-white px-2 py-1 rounded",
            "Processing" => "bg-blue-500 text-white px-2 py-1 rounded",
            "Delivering" => "bg-green-500 text-white px-2 py-1 rounded",
            "Completed" => "bg-red-500 text-white px-2 py-1 rounded",
            _ => "bg-gray-500 text-white px-2 py-1 rounded"
        };
    }

    private string GetPaymentStatusClass(string status)
    {
        return status switch
        {
            "Pending" => "bg-yellow-500 text-white px-2 py-1 rounded",
            "Paid" => "bg-green-500 text-white px-2 py-1 rounded",
            "Failed" => "bg-red-500 text-white px-2 py-1 rounded",
            _ => "bg-gray-500 text-white px-2 py-1 rounded"
        };
    }

    private void GoToHome()
    {
        _navigation.NavigateTo("/Orders");
    }
}
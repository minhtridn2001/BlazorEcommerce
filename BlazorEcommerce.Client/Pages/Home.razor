@page "/"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.FluentUI.AspNetCore.Components
@using System.Globalization

@inject NavigationManager _navigationManager
@inject AuthenticationStateProvider _authenticationStateProvider
@inject HttpClient Http

@rendermode InteractiveWebAssembly

<PageTitle>Home</PageTitle>
@if (IsLoading)
{
    <div class="position-absolute w-100 vh-100 d-flex align-items-center justify-content-center">
        <FluentProgressRing></FluentProgressRing>
    </div>
}
else
{
    <div class="container mx-auto px-4">
        <ul class="flex justify-center space-x-4 p-4">
            @foreach (var category in Categories)
            {
                <li>
                    <button class="px-4 py-2 rounded transition duration-300 @GetCategoryActiveClass(category.Id)"
                    @onclick="() => FilterProducts(category.Id)">
                        @category.Name
                    </button>
                </li>
            }
        </ul>

        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 lg:grid-cols-4 gap-3 mt-6">
            @foreach (var prod in PagedProducts!.Items)
            {
                <div class="bg-white shadow-lg rounded-lg overflow-hidden">
                    <div class="flex justify-center bg-gray-50 p-4">
                        <img class="w-3/4 h-40 object-contain" src="@(!string.IsNullOrEmpty(prod.ImageUrl) ? prod.ImageUrl : "images/default.png")" alt="@prod.Name">
                    </div>

                    <div class="p-4 text-center">
                        <h5 class="text-lg font-semibold text-gray-900">@prod.Price.ToString("C", CultureInfo.GetCultureInfo("vi-VN"))</h5>
                        <h4 class="text-xl text-yellow-500 font-bold mt-2">@prod.Name</h4>
                        <button class="mt-4 w-full bg-green-500 text-white py-2 rounded-lg hover:bg-green-600 transition duration-300"
                        @onclick="() => AddToCart(prod.Id)">
                            <i class="bi bi-cart3 mr-2"></i> Add to cart
                        </button>
                    </div>
                </div>
            }
        </div>
        <div class="flex justify-center items-center space-x-2 mt-4">
            <Pagination PagedResult="PagedProducts" OnPageChange="LoadProducts" />
        </div>
    </div>
}

@code {
    private IEnumerable<CategoryDTO> Categories = new List<CategoryDTO>();
    private bool IsLoading { get; set; } = true;
    private int SelectedCategoryId { get; set; } = 0;

    private PagedResultDTO<ProductDTO>? PagedProducts = new();
    private int PageSize { get; set; } = 10;
    private int CurrentPage = 1;
    private int TotalPages = 1;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try 
            {
                await LoadCategories();
                SelectedCategoryId = Categories.FirstOrDefault()?.Id ?? 0;
                await LoadProducts((CurrentPage, PageSize));
            } catch (Exception ex) {
                Console.Error.WriteLine($"Error loading data: {ex}");
            } 
            finally {
                IsLoading = false;
                StateHasChanged();
            }

        }
    }

    private async Task LoadCategories()
    {
        try
        {
            var response = await Http.GetFromJsonAsync<IEnumerable<CategoryDTO>>("api/categories");
            if (response != null)
            {
                Categories = response;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading categories: {ex}");
        }
    }

    private async Task LoadProducts((int pageNumber, int pageSize) paging)
    {
        try
        {
            PagedProducts = await Http.GetFromJsonAsync<PagedResultDTO<ProductDTO>>($"api/products?pageNumber={paging.pageNumber}&pageSize={paging.pageSize}&categoryId={SelectedCategoryId}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading products: {ex.Message}");
        }
    }

    private async void FilterProducts(int categoryId)
    {
        SelectedCategoryId = categoryId;
        CurrentPage = 1;
        await LoadProducts((CurrentPage, PageSize));
        StateHasChanged();
    }

    private string GetCategoryActiveClass(int categoryId)
    {
        return categoryId == SelectedCategoryId ? "bg-yellow-500 text-white font-bold" : "text-gray-700 hover:text-white hover:bg-yellow-400";
    }

    private async Task AddToCart(string productId)
    {
        var context = await _authenticationStateProvider.GetAuthenticationStateAsync();
        var isAuthenticated = context?.User?.Identity?.IsAuthenticated;

        if (!(isAuthenticated ?? false))
        {
            _navigationManager.NavigateTo("Account/Login");
        }
        try
        {
            var response = await Http.PutAsJsonAsync($"api/cartItems/{productId}", new { });
            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("Product added to cart successfully.");
            }
            else
            {
                Console.WriteLine($"Failed to add product to cart with response: {response}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding product to cart: {ex.Message}");
        }
    }
}
@page "/products/{id}"
@using Microsoft.AspNetCore.Authorization
@using System.Globalization

@inject HttpClient _http
@inject NavigationManager _navigation
@inject ProductService _productService

@attribute [Authorize]
@rendermode InteractiveWebAssembly

<PageTitle>Product Details</PageTitle>

<div class="max-w-3xl mx-auto bg-white shadow-lg rounded-lg p-6 mt-6">
    @if (product is null)
    {
        <p class="text-gray-500 text-center">Loading...</p>
    }
    else
    {
        <h1 class="text-2xl font-semibold text-gray-800">@product.Name</h1>
        <hr class="my-4" />
        <div class="space-y-2 text-sm text-gray-700">
            <div class="flex gap-4">
                <div class="font-medium w-32 shrink-0">Description:</div>
                <div class="flex-1">@product.Description</div>
            </div>

            <div class="flex gap-4">
                <div class="font-medium w-32 shrink-0">Price:</div>
                <div class="text-green-600 font-semibold flex-1">@product.Price.ToVND()</div>
            </div>
        </div>

        <div class="mt-6 text-center">
            <img src="@(string.IsNullOrWhiteSpace(product.ImageUrl) ? "/images/products/placeholder.png" : product.ImageUrl)"
                 alt="Product Image" class="rounded-lg shadow-md border max-w-xs mx-auto" />
        </div>

        <div class="mt-6 flex justify-between">
            <AddToCart ProductId="@product.Id" />

            <button class="btn btn-primary w-45 py-2" @onclick="GoToHome">
                <i class="bi bi-arrow-left"></i> Continue Shopping
            </button>
        </div>
    }
</div>


@code {
    private ProductDTO? product;

    [Parameter]
	public string Id { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            product = await _productService.GetProductByIdAsync(Id);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching product: ${ex}");
        }
    }

    private void GoToHome()
    {
        _navigation.NavigateTo("/");
    }
}

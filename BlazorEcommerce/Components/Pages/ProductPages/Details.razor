@page "/products/details"
@using Microsoft.EntityFrameworkCore
@using BlazorEcommerce.Data
@inject IDbContextFactory<BlazorEcommerce.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h2>Product</h2>
    <hr />
    @if (product is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Name</dt>
            <dd class="col-sm-10">@product.Name</dd>
            <dt class="col-sm-2">Description</dt>
            <dd class="col-sm-10">@product.Description</dd>
            <dt class="col-sm-2">Price</dt>
            <dd class="col-sm-10">@product.Price</dd>
            <dt class="col-sm-2">ImageUrl</dt>
            <dd class="col-sm-10">@product.ImageUrl</dd>
            <dt class="col-sm-2">CreatedDate</dt>
            <dd class="col-sm-10">@product.CreatedDate</dd>
            <dt class="col-sm-2">ModifiedDate</dt>
            <dd class="col-sm-10">@product.ModifiedDate</dd>
            <dt class="col-sm-2">IsDeleted</dt>
            <dd class="col-sm-10">@product.IsDeleted</dd>
            <dt class="col-sm-2">CategoryId</dt>
            <dd class="col-sm-10">@product.CategoryId</dd>
        </dl>
        <div>
            <a href="@($"/products/{product.Id}")">Edit</a> |
            <a href="@($"/products")">Back to List</a>
        </div>
    }
</div>

@code {
    private Product? product;

    [SupplyParameterFromQuery]
    private string Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        product = await context.Product.FirstOrDefaultAsync(m => m.Id == Id);

        if (product is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}

@page "/products/create"
@page "/products/{id:guid}"
@using Microsoft.EntityFrameworkCore
@using BlazorEcommerce.Data
@inject IDbContextFactory<BlazorEcommerce.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<PageTitle>@(IsEditMode ? "Edit" : "Create") Product</PageTitle>

<h1>@(IsEditMode ? "Edit" : "Create")</h1>

<h2>Product</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Product" OnValidSubmit="SaveProduct" FormName="SaveProduct" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="mb-3">
                <label for="name" class="form-label">Name:</label> 
                <InputText id="name" @bind-Value="Product.Name" class="form-control" /> 
                <ValidationMessage For="() => Product.Name" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="description" class="form-label">Description:</label> 
                <InputTextArea id="description" @bind-Value="Product.Description" class="form-control" rows="5" /> 
                <ValidationMessage For="() => Product.Description" class="text-danger" />
            </div>        
            <div class="mb-3">
                <label for="price" class="form-label">Price:</label> 
                <InputNumber id="price" @bind-Value="Product.Price" class="form-control" /> 
                <ValidationMessage For="() => Product.Price" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="imageurl" class="form-label">ImageUrl:</label> 
                <InputFile id="imageurl" OnChange="UploadImage" class="form-control" accept="image/*" max-size="5242880" />
                <ValidationMessage For="() => Product.ImageUrl" class="text-danger" />
                @if (!string.IsNullOrEmpty(Product.ImageUrl))
                {
                    <div class="mt-3">
                        <img src="@Product.ImageUrl" alt="Product Image" class="img-thumbnail" style="max-width: 200px;" />
                    </div>
                }
            </div>
            <div class="mb-3">
                <label for="categoryid" class="form-label">Category:</label> 
                <InputSelect id="categoryid" @bind-Value="Product.CategoryId" class="form-control">
                    @foreach (var category in Categories)
                    {
                        <option value="@category.Id">@category.Name</option>
                    }
                </InputSelect>
                <ValidationMessage For="() => Product.CategoryId" class="text-danger" />

            </div>
            @if (IsEditMode)
            {
                <div class="mb-3">
                    <label for="isdeleted" class="form-label">IsDeleted:</label>
                    <InputCheckbox id="isdeleted" @bind-Value="Product.IsDeleted" class="form-check-input" />
                    <ValidationMessage For="() => Product.IsDeleted" class="text-danger" />
                </div>
            }
            <button type="submit" class="btn btn-primary">@ButtonText</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/products">Back to List</a>
</div>

@code {
    [Parameter]
    public Guid? Id { get; set; }

    private Product Product { get; set; } = new();

    private string ProductId { get; set; } = Guid.NewGuid().ToString();

    private List<ProductCategory> Categories { get; set; } = new();

    private bool IsEditMode => Id.HasValue;

    private string ButtonText => IsEditMode ? "Update" : "Create";

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Categories = await context.ProductCategory.ToListAsync();
        if (Product.CategoryId == 0 && Categories.Any())
        {
            Product.CategoryId = Categories.First().Id;
        }

        if (IsEditMode)
        {
            Product = await context.Product.FindAsync(Id!.ToString()) ?? new Product();
            ProductId = Product.Id;
        }
    }

    private async Task SaveProduct()
    {
        using var context = DbFactory.CreateDbContext();
        if (IsEditMode)
        {
            context.Product.Update(Product);
        }
        else
        {
            Product.Id = ProductId;
            context.Product.Add(Product);
        }
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/products");
    }

    private async Task UploadImage(InputFileChangeEventArgs e)
    {
        var file = e.File;
        var fileName = $"{ProductId}{Path.GetExtension(file.Name)}";
        var filePath = Path.Combine("wwwroot/images/products", fileName);

        using (var stream = file.OpenReadStream())
        using (var fileStream = new FileStream(filePath, FileMode.Create))
        {
            await stream.CopyToAsync(fileStream);
        }

        Product.ImageUrl = $"/images/products/{fileName}";
    }
}

@page "/admin/products/create"
@page "/admin/products/edit"
@using Microsoft.EntityFrameworkCore
@using BlazorEcommerce.Data
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = "Admin")]
@inject IDbContextFactory<BlazorEcommerce.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<PageTitle>@(IsEditMode ? "Edit" : "Create") Product</PageTitle>

<div class="max-w-3xl mx-auto bg-white shadow-lg rounded-lg p-6 mt-6">
    <h1 class="text-2xl font-semibold text-gray-800">@(IsEditMode ? "Edit" : "Create") Product</h1>
    <p class="text-gray-500">Fill in the details below to @(IsEditMode ? "update" : "create") the product.</p>
    <hr class="my-4" />

    <EditForm method="post" Model="Product" OnValidSubmit="SaveProduct" FormName="SaveProduct" Enhance>
        <DataAnnotationsValidator />
        <ValidationSummary class="text-red-500" role="alert"/>

        <div class="space-y-4">
            <div>
                <label for="name" class="block text-sm font-medium text-gray-700">Name:</label>
                <InputText id="name" @bind-Value="Product.Name" class="w-full px-4 py-2 border rounded-md shadow-sm focus:ring focus:ring-blue-300 focus:border-blue-500" />
                <ValidationMessage For="() => Product.Name" class="text-red-500 text-sm mt-1" />
            </div>

            <div>
                <label for="description" class="block text-sm font-medium text-gray-700">Description:</label>
                <InputTextArea id="description" @bind-Value="Product.Description" class="w-full px-4 py-2 border rounded-md shadow-sm focus:ring focus:ring-blue-300 focus:border-blue-500" rows="5" />
                <ValidationMessage For="() => Product.Description" class="text-red-500 text-sm mt-1" />
            </div>

            <div>
                <label for="price" class="block text-sm font-medium text-gray-700">Price:</label>
                <InputNumber id="price" @bind-Value="Product.Price" class="w-full px-4 py-2 border rounded-md shadow-sm focus:ring focus:ring-blue-300 focus:border-blue-500" />
                <ValidationMessage For="() => Product.Price" class="text-red-500 text-sm mt-1" />
            </div>

            <div>
                <label for="imageurl" class="block text-sm font-medium text-gray-700">Image Upload:</label>
                <InputFile id="imageurl" OnChange="UploadImage" class="w-full px-4 py-2 border rounded-md shadow-sm focus:ring focus:ring-blue-300 focus:border-blue-500" accept="image/*" max-size="5242880" />
                <ValidationMessage For="() => Product.ImageUrl" class="text-red-500 text-sm mt-1" />
                
                @if (!string.IsNullOrEmpty(Product.ImageUrl))
                {
                    <div class="mt-3">
                        <img src="@Product.ImageUrl" alt="Product Image" class="rounded-lg shadow-md border max-w-xs mx-auto" />
                    </div>
                }
            </div>

            <div>
                <label for="categoryid" class="block text-sm font-medium text-gray-700">Category:</label>
                <InputSelect id="categoryid" @bind-Value="Product.CategoryId" class="w-full px-4 py-2 border rounded-md shadow-sm focus:ring focus:ring-blue-300 focus:border-blue-500">
                    @foreach (var category in Categories)
                    {
                        <option value="@category.Id">@category.Name</option>
                    }
                </InputSelect>
                <ValidationMessage For="() => Product.CategoryId" class="text-red-500 text-sm mt-1" />
            </div>

            @if (IsEditMode)
            {
                <div class="flex items-center">
                    <InputCheckbox id="isdeleted" type="checkbox" class="h-4 w-4 text-blue-600 border-gray-300 focus:ring focus:ring-blue-300 focus:border-blue-500" @bind-Value="Product.IsDeleted" />
                    <label for="isdeleted" class="ml-2 text-sm font-medium text-gray-700">Mark as Deleted</label>
                </div>
            }

            <button type="submit" class="w-full bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 transition duration-200">
                @ButtonText
            </button>
        </div>
    </EditForm>

    <div class="mt-4 text-center">
        <a href="/admin/products" class="text-blue-500 hover:underline">← Back to Product List</a>
    </div>
</div>

@code {
    [SupplyParameterFromQuery]
    private string? Id { get; set; }

    private Product Product { get; set; } = new();

    private string ProductId { get; set; } = Guid.NewGuid().ToString();

    private List<ProductCategory> Categories { get; set; } = new();

    private bool IsEditMode => Id is not null;

    private string ButtonText => IsEditMode ? "Update" : "Create";

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Categories = await context.ProductCategory.ToListAsync();
        if (Product.CategoryId == 0 && Categories.Any())
        {
            Product.CategoryId = Categories.First().Id;
        }

        if (IsEditMode)
        {
            Product = await context.Product.FindAsync(Id!) ?? new Product();
            ProductId = Product.Id;
        }
    }

    private async Task SaveProduct()
    {
        using var context = DbFactory.CreateDbContext();
        if (IsEditMode)
        {
            context.Product.Update(Product);
        }
        else
        {
            Product.Id = ProductId;
            context.Product.Add(Product);
        }
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/admin/products");
    }

    private async Task UploadImage(InputFileChangeEventArgs e)
    {
        var file = e.File;
        var fileName = $"{ProductId}{Path.GetExtension(file.Name)}";
        var filePath = Path.Combine("wwwroot/images/products", fileName);

        using (var stream = file.OpenReadStream())
        using (var fileStream = new FileStream(filePath, FileMode.Create))
        {
            await stream.CopyToAsync(fileStream);
        }

        Product.ImageUrl = $"/images/products/{fileName}";
    }
}
